
In the rest of this paper we will concentrate on the case that the players base their decisions on a performance criterion that has an infinite-planning horizon. We will present an algorithm and a corresponding MATLAB numerical toolbox which solves any form of an infinite-planning horizon affine linear quadratic open-loop differential game. The software, called LQDG Toolbox, is available as a freeware from the authors of this paper. 1 By rewriting a specific application into the standard framework, one can use the toolbox to calculate and verify the existence of both the open-loop non-cooperative Nash equilibrium (equilibria) and cooperative Pareto equilibrium (equilibria) of any infinite-planning horizon affine linear quadratic open-loop differential game. In case there is more than one equilibrium for the non-cooperative case, the toolbox determines all solutions that can be implemented as a state-feedback strategy that is a common assumption in most of the applications. 2 Alternatively, the toolbox can apply a number of choice methods in order to discriminate between multiple equilibria. For instance, one can choose to report only Pareto-undominated solutions or only those that are characterised by the lowest combined loss of all the players. In order to determine the cooperative solution, the user is asked to specify the relative importance of each player in the cooperative game. Moreover, the user can predefine a set of coalition structures for which they would like to calculate the noncooperative Nash solution(s). Conversely, a coalition structure generator is provided that automatically creates a whole space of coalition structures for a given number of players. Furthermore, the toolbox offers plotting facilities as well as other options to analyze the outcome of the game. For instance, it is possible to disaggregate each player's total loss into its contributing elements, which correspond to the quadratic expressions constituting the player's loss function.
Step A2 in the above algorithm verifies whether the algebraic Riccati equations (20) have a stabilizing solution. Of course one can use here MATLAB to verify this. Concerning the numerical stability of Algorithm 5 we notice that various suggestions have been made in the literature to calculate solutions of Riccati equations in a numerically reliable way (see e.g. Laub (1979, 1991), Paige and van Loan (1981), van Dooren (1981), Mehrmann (1991) and Abou-Kandil and Bertrand (1986) for a more general survey on various types of Riccati equations). These methods can also be used to improve the numerical stability of Algorithm 5. In particular, if one considers the implementation of large scale models one should consult this literature.
Next we proceed with an outline of the numerical toolbox. The software verifies the existence of and, provided that a finite number of equilibria exists, calculates the outcome of the N -player extension of the game (1-3). The scheme presenting all the components of the toolbox software is displayed in Fig. 1. The main file, calledLQDGsolver.exe, solves the LQDG which is to be defined in the input. The input file can be created by the user using an intuitive input interface provided (file TBXinput- GUI.exe). Alternatively, more proficient users might choose to create the input file directly (in MATLAB or text formats). LQDGsolver produces the following output for every coalition structure considered:
The above output is saved in MATLAB and text formats in a directory that corresponds to the chosen name of the project. The following output files are created:
• PROJECT_NAME_model.txt: text file containing the structural and reduced form of the dynamic system; • inputPROJECT_NAME.m: binary MATLAB file containing (processed) input to the project; • PROJECT_NAME_validation.txt: text file containing all the information about the various stages of model validation; • PROJECT_NAME_output.txt: text file containing all the output produced; and • outputPROJECT_NAME.m: binary MATLAB file containing all the project's output.
The plotting tool is provided that uses the above output to draw the dynamics of every variable in the model for a chosen coalition structure and equilibrium. Less advanced users can use a simple output interface (file TBXoutputGUI.exe) that allowsboth to edit the toolbox output and to plot the graphs required. Conversely, more advanced users can directly analyse output of all numerical simulations and create graphs.
Step T1: LQDG Toolbox Initialisation To define the LQDG problem the user is supposed to provide a number of compulsory components of the model. As it has been mentioned before, it is the most convenient to use the interface provided in order to create the project. The main window of the user interface is shown in Fig. 2. More proficient users also may create the input file directly in MATLAB or text formats. Compulsory components of the LQDG problem include:
• the nonzero P i and P i j matrices from the structural form model (30-31); • the parameters from the performance criterion (32); • the initial condition p 0 ; and • the coalition structures to be considered. 8 • If the model includes constants, i.e., at least one element of matrices P 5 and P 10 is non-zero, then it is mandatory to specify a strictly positive discount rate.Step T2: Model Validation by LQDG Toolbox Based on the input that is provided in
Step T1: LQDG Toolbox Initialisation The above maximisation problems can be rewritten in terms of (32) as:
Step T2: Model Validation by LQDG Toolbox With this input the toolbox next calculates the standard form (17-18) by considering the new variables:
Step T1: LQDG Toolbox Initialisation We can rewrite the above example to fit our standard model (30-31) by specifying:
Step T2: Model Validation by LQDG Toolbox With this input the toolbox next calculates the standard form (17-18). Clearly, (i) R ii > 0; (ii) (A, B i ) is stabilizable; and (iii) G is invertible (see Appendix A for a definition of G).
Step T1: LQDG Toolbox Initialisation We can rewrite the above example to fit our standard model (30-31) by specifying: P 1 = P 2 = P 3 = P 4i = P 5 = P 6 = P 8 = 0, P 7 = A, P 9i = B i and P 10 = 0 0 .
Step T2: Model Validation by LQDG Toolbox With this input, the toolbox next calculates the standard form (17-18) and checks that both Q i and R i are positive definite, (A, B i ) are stabilizable and G is invertible.
In this paper we considered a dynamic linear affine structural form model that is affected by different players who all like to minimise their own performance criterion that is a quadratic affine function of the variables occurring in the model. The costs are assumed to be discounted over time and the considered planning horizon by the players is assumed to be infinite. Under the assumption that in the minimisation of their performance the players do not cooperate, we presented both necessary and sufficient conditions under which this problem has a unique open-loop Nash equilibrium, a multiple but finite number of equilibria and or an infinite number of equilibria. A computational framework was provided for how one can numerically solve the problem. The algorithm has been implemented in a form of a numerical toolbox available on the internet. Users, starting from the structural model, can calculate for their specific application the equilibrium strategies and involved cost (if they exist). The toolbox also provides the possibility to calculate for different coalition structures whether the corresponding game will have an open-loop Nash solution. For that purpose the user has to define which coalition structures they like to analyze and what the relative importance is of each player within a certain coalition. We demonstrated both theoretically and numerically in a worked example on dynamic duopolistic competition the use of the toolbox.LQDG Toolbox is implemented in MATLAB. In particular, it uses some standard functions of MATLAB to calculate the eigenstructure of a (|N |n) × (|N |n) matrix, where |N | is the number of involved players andn is the state dimension of the model. Since no additional efforts are taken to calculate this eigenstructure in a numerically efficient way, the practical use of the current toolbox is limited to some extent. This is because for either a large number of players and/or a large state dimension, the accuracy and efficiency is restricted by that of the implemented MATLAB functions. So for large N and/orn the user should look for an own code to implement the algorithm. Another way one might choose to calculate the equilibrium strategies is by using iterative algorithms. In the literature a number of iterative schemes have been suggested (see e.g. Engwerda 2007). A disadvantage of these schemes is that on the one hand they do not provide an answer to the question whether the game will have a unique equilibrium. On the other hand these schemes may converge without providing the appropriate equilibrium strategy. If this happens one is stuck with the question how to proceed.
For the corresponding problem with a finite planning horizon, at least from a theoretical point, it is clear under which conditions there exists a unique equilibrium (see e.g. Engwerda 2005). From a computational point it is also clear how one can calculate this equilibrium. Either one can solve the involved set of nonlinear differential two-point boundary-value equations directly using standard MATLAB functions. Another possibility is to transform the involved set of Riccati differential equations (in the spirit of Reid (1972)) to a set of linear differential equations and then solve this set first (see e.g. Tabak 1975; Engwerda 2007). Since the calculations require the numerical solution of a set of (nonlinear) differential equations the dimension of the games for which one can still calculate the equilibrium actions (using standardMATLAB functions) without problems is usually smaller than in the infinite horizon case.
Finally, we would like to mention that for discrete time systems much work has been done by Neck et al. in the development of the numerical software OPTGAME for the calculation of Nash equilibria in (non-)linear systems in case the performances of players are quadratic (see e.g. Neck et al. 2001).
